// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  this.before = function(decoration) {
    return function(base) {
      return function() {
        decoration.apply(this, arguments);
        return base.apply(this, arguments);
      };
    };
  };

  this.after = function(decoration) {
    return function(base) {
      return function() {
        var __value__;
        decoration.call(this, __value__ = base.apply(this, arguments));
        return __value__;
      };
    };
  };

  this.around = function(decoration) {
    return function(base) {
      return function() {
        var apply_base, argv, __value__,
          _this = this;
        argv = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        __value__ = void 0;
        apply_base = function() {
          return __value__ = base.apply(_this, argv);
        };
        decoration.apply(this, [apply_base].concat(argv));
        return __value__;
      };
    };
  };

  this.provided = function(predicate) {
    return function(base) {
      return function() {
        if (predicate.apply(this, arguments)) {
          return base.apply(this, arguments);
        }
      };
    };
  };

  this.excepting = function(predicate) {
    return function(base) {
      return function() {
        if (!predicate.apply(this, arguments)) {
          return base.apply(this, arguments);
        }
      };
    };
  };

  this.retry = function(times) {
    return function(base) {
      return function() {
        if (!(times >= 0)) {
          return;
        }
        while (true) {
          try {
            return base.apply(this, arguments);
          } catch (error) {
            if (!((times -= 1) >= 0)) {
              throw error;
            }
          }
        }
      };
    };
  };

  this.precondition = function(throwable, predicate) {
    if (!predicate) {
      (predicate = throwable) && (throwable = 'Failed precondition');
    }
    return this.before(function() {
      if (!predicate.apply(this, arguments)) {
        throw throwable;
      }
    });
  };

  this.postcondition = function(throwable, predicate) {
    if (!predicate) {
      (predicate = throwable) && (throwable = 'Failed postcondition');
    }
    return this.after(function() {
      if (!predicate.apply(this, arguments)) {
        throw throwable;
      }
    });
  };

  this.splatter = function(base) {
    return function() {
      var args, array, element, newArgs, _i, _len, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      array = args[0];
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        element = array[_i];
        newArgs = args.slice(0);
        newArgs[0] = element;
        _results.push(base.apply(this, newArgs));
      }
      return _results;
    };
  };

  this.async = (function(async) {
    async = function(fn) {
      return function() {
        var argv, callback, _i;
        argv = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
        return callback(fn.apply(this, argv));
      };
    };
    async.before = function(async_decoration) {
      return function(async_base) {
        return function() {
          var apply_base, argv, callback, __value__, _i,
            _this = this;
          argv = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
          __value__ = void 0;
          apply_base = function() {
            return __value__ = async_base.apply(_this, argv.concat(callback));
          };
          async_decoration.apply(this, argv.concat(apply_base));
          return __value__;
        };
      };
    };
    async.after = function(async_decoration) {
      return function(async_base) {
        return function() {
          var argv, callback, decorated_callback, _i,
            _this = this;
          argv = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
          decorated_callback = function() {
            var callback_argv;
            callback_argv = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return async_decoration.apply(_this, callback_argv.concat(function() {
              return callback.apply(this, callback_argv);
            }));
          };
          return async_base.apply(this, argv.concat(decorated_callback));
        };
      };
    };
    async.provided = function(async_predicate) {
      return function(async_base) {
        return function() {
          var argv, callback, decorated_base, _i;
          argv = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
          decorated_base = function(predicate_value) {
            if (predicate_value) {
              return async_base.apply(this, argv.concat(callback));
            } else {
              return callback();
            }
          };
          return async_predicate.apply(this, argv.concat(decorated_base));
        };
      };
    };
    return async;
  })(void 0);

  this.helpers = (function(helpers, combinators) {
    helpers.my = function(name) {
      return function() {
        var args, func;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        func = this[name];
        return func.apply(this, args);
      };
    };
    helpers.pipe = function() {
      var functions;
      functions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return function() {
        var args, func, result, _i, _len;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = void 0;
        for (_i = 0, _len = functions.length; _i < _len; _i++) {
          func = functions[_i];
          result = func.apply(this, args);
          args = [result];
        }
        return result;
      };
    };
    helpers.pipeMy = function() {
      return helpers.pipe.apply(helpers, (combinators.splatter(helpers.my))(arguments));
    };
    return helpers;
  })({}, this);

}).call(this);
